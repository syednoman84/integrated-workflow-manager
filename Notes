üê≥ Step-by-Step: Install Docker and Run WireMock on MacBook
‚úÖ Step 1: Install Docker Desktop for Mac

    Go to: https://www.docker.com/products/docker-desktop/

    Click "Download for Mac (Apple chip)" or "Intel chip", depending on your machine.

        To check your chip:
        Go to Apple menu > About This Mac.

    Run the installer (.dmg file) and follow the installation steps.

    After install, open Docker Desktop and ensure it starts without errors.

        It may ask for system permissions.

        Wait for the Docker whale icon üê≥ in your top menu bar to become active (solid white).

‚úÖ Step 2: Verify Docker Installation

Open your terminal and run:

docker --version

You should see something like:

Docker version 24.x.x, build xxxx

‚úÖ Step 3: Run WireMock Docker Container

In terminal:

docker run -d --name wiremock -p 8089:8080 wiremock/wiremock

    -d: detached mode

    --name wiremock: easy to stop later

    -p 8089:8080: maps local port 8089 to internal 8080

You now have WireMock running at:
üëâ http://localhost:8089
‚úÖ Step 4: Test with Default Page

Open your browser and go to:

http://localhost:8089/__admin

You should see a JSON page like:

{
  "mappings": [],
  "meta": {
    "total": 0
  }
}

‚úÖ You‚Äôre ready to create mock endpoints!
üßº Optional: Stop/Remove Container

docker stop wiremock
docker rm wiremock

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------


‚úÖ Step-by-Step: Create Mock Endpoints in WireMock
üü° 1. authToken ‚Äî POST /post

curl -X POST http://localhost:8089/__admin/mappings \
  -H "Content-Type: application/json" \
  -d '{
    "request": {
      "method": "POST",
      "url": "/post"
    },
    "response": {
      "status": 200,
      "jsonBody": {
        "token": "mocked-token-123"
      },
      "headers": {
        "Content-Type": "application/json"
      }
    }
  }'

üü° 2. getUser ‚Äî GET /users/1

curl -X POST http://localhost:8089/__admin/mappings \
  -H "Content-Type: application/json" \
  -d '{
    "request": {
      "method": "GET",
      "url": "/users/1"
    },
    "response": {
      "status": 200,
      "jsonBody": {
        "id": 1,
        "username": "Bret"
      },
      "headers": {
        "Content-Type": "application/json"
      }
    }
  }'

üü° 3. getUserProfile ‚Äî GET /get with Bearer token

curl -X POST http://localhost:8089/__admin/mappings \
  -H "Content-Type: application/json" \
  -d '{
    "request": {
      "method": "GET",
      "url": "/get",
      "headers": {
        "Authorization": {
          "equalTo": "Bearer mocked-token-123"
        }
      }
    },
    "response": {
      "status": 200,
      "jsonBody": {
        "profile": "user profile data"
      },
      "headers": {
        "Content-Type": "application/json"
      }
    }
  }'

üü° 4. getInternalData ‚Äî GET /basic-auth/demo/pass with Basic Auth

    Basic demo:pass ‚Üí base64 ‚Üí ZGVtbzpwYXNz

curl -X POST http://localhost:8089/__admin/mappings \
  -H "Content-Type: application/json" \
  -d '{
    "request": {
      "method": "GET",
      "url": "/basic-auth/demo/pass",
      "headers": {
        "Authorization": {
          "equalTo": "Basic ZGVtbzpwYXNz"
        }
      }
    },
    "response": {
      "status": 200,
      "jsonBody": {
        "internal": "secret data"
      },
      "headers": {
        "Content-Type": "application/json"
      }
    }
  }'

üü° 5. loanCheck ‚Äî GET /loan-check/.*

curl -X POST http://localhost:8089/__admin/mappings \
  -H "Content-Type: application/json" \
  -d '{
  "request": {
    "method": "GET",
    "urlPathPattern": "/loan-check/.*"
  },
  "response": {
    "status": 200,
    "jsonBody": {
        "status": "approved",
        "limit": 10000
    },
    "headers": {
      "Content-Type": "application/json"
    }
  }
}'

üü° 6. riskCheck ‚Äî GET /risk-check/.*

curl -X POST http://localhost:8089/__admin/mappings \
  -H "Content-Type: application/json" \
  -d '{
  "request": {
    "method": "GET",
    "urlPathPattern": "/risk-check/.*"
  },
  "response": {
    "status": 200,
    "jsonBody": {
        "RiskLevel": "Low",
        "limit": 10000
    },
    "headers": {
      "Content-Type": "application/json"
    }
  }
}'

üü° 7. validateUser ‚Äî POST /validate-user

curl -X POST http://localhost:8089/__admin/mappings \
  -H "Content-Type: application/json" \
  -d '{
  "request": {
    "method": "POST",
    "url": "/validate-user",
    "bodyPatterns": [
      {
        "matchesJsonPath": "$[?(@.userId == '12345')]"
      },
      {
        "matchesJsonPath": "$[?(@.loanAmount == 5000)]"
      }
    ]
  },
  "response": {
    "status": 200,
    "jsonBody": {
      "valid": true,
      "message": "User validated successfully"
    }
  }
}'

üîÑ Verify

Open http://localhost:8089/__admin/mappings to confirm that all endpoints are registered.

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

Endpoints for the apis mappings created in the wiremock:
‚úÖ 1. authToken ‚Üí POST /post

curl -X POST http://localhost:8089/post \
  -H "Content-Type: application/json" \
  -d '{"username": "demo", "password": "demo123"}'


  Expected response:
{
  "token": "mocked-token-123"
}


‚úÖ 2. getUser ‚Üí GET /users/1

curl http://localhost:8089/users/1

Expected response:

{
  "id": 1,
  "username": "Bret"
}

‚úÖ 3. getUserProfile ‚Üí GET /get with Bearer token

curl http://localhost:8089/get \
  -H "Authorization: Bearer mocked-token-123"

Expected response:

{
  "profile": "user profile data"
}

‚úÖ 4. getInternalData ‚Üí GET /basic-auth/demo/pass with Basic Auth

curl http://localhost:8089/basic-auth/demo/pass \
  -H "Authorization: Basic ZGVtbzpwYXNz"

Expected response:

{
  "internal": "secret data"
}

‚úÖ 5. loanCheck ‚Üí GET /loanCheck/.*

curl http://localhost:8089/loan-check/1

Expected response:

{
  "status": "approved",
  "limit": 10000
}

‚úÖ 6. riskCheck ‚Üí GET /riskCheck/.*

curl http://localhost:8089/risk-check/1

Expected response:

{
  "status": "approved",
  "limit": 10000
}

‚úÖ 7. validateUser ‚Üí POST /validate-user

curl -X POST http://localhost:8089/validate-user \
  -H "Content-Type: application/json" \
  -d '{"userId": "12345", "loanAmount": 5000}'
